/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/methylseq Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

nextflow.enable.configProcessNamesValidation = false

aws {
    region = "us-east-1"

    process {
        executor = "awsbatch"
        queue = "batch_job_queue"
        docker.enabled = true
    }
}

process {
    container = "public.ecr.aws/t1x4r7h8/nextflow-public:1.3.9"
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB * task.attempt, 'memory'  ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 64    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 64    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
    }
    withLabel:process_long {
        time   = { check_max( 50.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
    withName: BISMARK_ALIGN {
        time = { check_max( 8.d * task.attempt, 'time' ) }
        memory = 256.GB
    }
    withName: BISMARK_DEDUPLICATE {
        time = { check_max( 2.d * task.attempt, 'time' ) }
    }
    withName: BISMARK_METHYLATIONEXTRACTOR {
        time = { check_max( 1.d * task.attempt, 'time' ) }
    }
    withName: BWAMETH_ALIGN {
        time = { check_max( 6.d * task.attempt, 'time' ) }
    }
}
