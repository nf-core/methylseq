/*
========================================================================================
    masterworkflow Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

// process {

//     // TODO nf-core: Check the defaults for all processes
//     cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
//     memory = { check_max( 2.GB * task.attempt, 'memory' ) }
//     time   = { check_max( 4.h  * task.attempt, 'time'   ) }

//     errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
//     maxRetries    = 3
//     maxErrors     = '-1'

//     // Process-specific resource requirements
//     // NOTE - Please try and re-use the labels below as much as possible.
//     //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
//     //        If possible, it would be nice to keep the same label naming convention when
//     //        adding in your local modules too.
//     // TODO nf-core: Customise requirements for specific processes.
//     // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
//     withLabel:process_low {
//         errorStrategy = {task.attempt <= 3 ? 'retry' : 'finish'}
//         maxRetries = 3
//         cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
//         memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
//         time   = { check_max( 12.h   * task.attempt, 'time'    ) }
//     }
//     withLabel:process_medium {
//         errorStrategy = {task.attempt <= 3 ? 'retry' : 'finish'}
//         maxRetries = 3
//         cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
//         memory = { check_max( 12.GB  * task.attempt, 'memory'  ) }
//         time   = { check_max( 24.h  * task.attempt, 'time'    ) }
//     }
//     withLabel:process_high {
//         errorStrategy = {task.attempt <= 3 ? 'retry' : 'finish'}
//         maxRetries = 3
//         cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
//         memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
//         time   = { check_max( 24.h  * task.attempt, 'time'    ) }
//     }
//     withLabel:process_long {
//         time   = { check_max( 200.h  * task.attempt, 'time'    ) }
//         // long processes are run only on the on-demand queue
//         queue = { params.on_demand_queue }
//     }
//     withLabel:process_high_memory {
//         memory = { check_max( 100.GB * task.attempt, 'memory' ) }
//     }
//     withLabel:error_ignore {
//         errorStrategy = 'ignore'
//     }
//     withLabel:error_retry {
//         errorStrategy = 'retry'
//         maxRetries    = 2
//     }
//     withName:CUSTOM_DUMPSOFTWAREVERSIONS {
//         cache = false
//     }
// }
