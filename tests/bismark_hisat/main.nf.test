import com.askimed.nf.test.util.FileUtil;

nextflow_pipeline {

    name "bismark_hisat"
    script "main.nf"

    test("BISMARK_HISAT_Single_End") {
        when {
            params {
                aligner = "bismark_hisat"
                save_reference = true
                outdir = "$outputDir"
            }
        }

        then {
            // Clean up anything from previous runs
            FileUtil.deleteDirectory(new File(".nf-test/indexes/"));
            new File(".nf-test/indexes/").mkdirs()
            // Copy the ref genome to a stable location for next tests
            FileUtil.copyDirectory(
                new File("$outputDir/bismark_hisat/reference_genome/BismarkIndex/").getAbsolutePath(),
                new File(".nf-test/indexes/BismarkIndex/").getAbsolutePath()
            )

            // Assert Workflow Success
            assert workflow.success

            // Snapshot
            assert snapshot(path("$outputDir/bismark_hisat/methylation_calls/splitting_report/Ecoli_10K_methylated_1_val_1_bismark_hisat2_pe.deduplicated_splitting_report.txt"),
                            path("$outputDir/bismark_hisat/methylation_calls/splitting_report/SRR389222_sub1_trimmed_bismark_hisat2.deduplicated_splitting_report.txt"),
                            path("$outputDir/bismark_hisat/methylation_calls/splitting_report/SRR389222_sub2_trimmed_bismark_hisat2.deduplicated_splitting_report.txt"),
                            path("$outputDir/bismark_hisat/summary/bismark_summary_report.txt"),
                            path("$outputDir/qualimap/Ecoli_10K_methylated/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub1/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub2/genome_results.txt"),
                            path("$outputDir/pipeline_info/software_versions.yml")).match("bismark_hisat_single_end")
        }
    }

    test("BISMARK_HISAT_Single_End_with_Index") {
        when {
            params {
                aligner = "bismark_hisat"
                // Generated by previous test
                bismark_index = ".nf-test/indexes/BismarkIndex/"
                local_alignment = true
                outdir = "$outputDir"
            }
        }

        then {
            // Assert Workflow Success
            assert workflow.success
        }
    }

    test("BISMARK_HISAT_Single_End_RRBS") {
        when {
            params {
                aligner = "bismark_hisat"
                save_reference = true
                skip_trimming = true
                rrbs = true
                outdir = "$outputDir"
            }
        }

        then {
            // Assert Workflow Success
            assert workflow.success

            // Snapshot
            assert snapshot(path("$outputDir/bismark_hisat/methylation_calls/splitting_report/Ecoli_10K_methylated_R1_bismark_hisat2_pe_splitting_report.txt"),
                            path("$outputDir/bismark_hisat/methylation_calls/splitting_report/SRR389222_sub1_bismark_hisat2_splitting_report.txt"),
                            path("$outputDir/bismark_hisat/methylation_calls/splitting_report/SRR389222_sub2.merged_bismark_hisat2_splitting_report.txt"),
                            path("$outputDir/bismark_hisat/summary/bismark_summary_report.txt"),
                            path("$outputDir/qualimap/Ecoli_10K_methylated/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub1/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub2/genome_results.txt"),
                            path("$outputDir/pipeline_info/software_versions.yml")).match("bismark_hisat_single_end_rrbs")
        }
    }

    test("BISMARK_HISAT_Single_End_RRBS_With_Index") {
        when {
            params {
                aligner = "bismark_hisat"
                skip_trimming = true
                rrbs = true
                // Generated by previous test
                bismark_index = ".nf-test/indexes/BismarkIndex/"
                local_alignment = true
                outdir = "$outputDir"
            }
        }

        then {
            // Assert Workflow Success
            assert workflow.success
        }
    }

}
