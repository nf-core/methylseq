import com.askimed.nf.test.util.FileUtil;

nextflow_pipeline {

    name "bismark"
    script "main.nf"

    test("Single End") {
        when {
            params {
                aligner = "bismark"
                save_reference = true
                outdir = "$outputDir"
            }
        }

        then {
            // Clean up anything from previous runs
            FileUtil.deleteDirectory(new File(".nf-test/indexes/"));
            new File(".nf-test/indexes/").mkdirs()
            // Copy the ref genome to a stable location for next tests
            FileUtil.copyDirectory(
                new File("$outputDir/bismark/reference_genome/BismarkIndex/").getAbsolutePath(),
                new File(".nf-test/indexes/BismarkIndex/").getAbsolutePath()
            )

            // Test results
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
            assert new File("$outputDir/multiqc/bismark/multiqc_report.html").exists()

            assert new File("$outputDir/bismark/methylation_calls/splitting_report/SRR389222_sub1_trimmed_bismark_bt2.deduplicated_splitting_report.txt").exists()
            assert new File("$outputDir/bismark/methylation_calls/splitting_report/SRR389222_sub2_trimmed_bismark_bt2.deduplicated_splitting_report.txt").exists()
            assert path("$outputDir/bismark/methylation_calls/splitting_report/SRR389222_sub2_trimmed_bismark_bt2.deduplicated_splitting_report.txt").md5 == "3038a90a6e513c3b1c0de540439eb101"
        }
    }

    test("Single End with index") {
        when {
            params {
                aligner = "bismark"
                // Generated by previous test
                bismark_index = ".nf-test/indexes/BismarkIndex/"
                cytosine_report = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
        }
    }

    test("Single End RRBS") {
        when {
            params {
                aligner = "bismark"
                skip_trimming = true
                save_reference = true
                rrbs = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
        }
    }

    test("Single End RRBS with index") {
        when {
            params {
                aligner = "bismark"
                skip_trimming = true
                rrbs = true
                save_reference = true
                // Generated by previous test
                bismark_index = ".nf-test/indexes/BismarkIndex/"
                cytosine_report = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
        }
    }

    test("Single End NOMe-seq") {
        when {
            params {
                aligner = "bismark"
                nomeseq = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
        }
    }

}
