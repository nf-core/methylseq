import com.askimed.nf.test.util.FileUtil;

nextflow_pipeline {

    name "bwameth"
    script "main.nf"

    test("Single End") {
        when {
            params {
                aligner = "bwameth"
                save_reference = true
                outdir = "$outputDir"
            }
        }

        then {
            // Clean up anything from previous runs
            FileUtil.deleteDirectory(new File(".nf-test/indexes/"));
            new File(".nf-test/indexes/").mkdirs()
            // Copy the ref genome to a stable location for next tests
            FileUtil.copyDirectory(
                new File("$outputDir/bwameth/reference_genome/bwameth/").getAbsolutePath(),
                new File(".nf-test/indexes/bwameth/").getAbsolutePath()
            )

            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            assert new File("$outputDir/multiqc/bwameth/multiqc_report.html").exists()
            assert new File("$outputDir/bwameth/deduplicated/SRR389222_sub1.markdup.sorted.bam").exists()
            assert new File("$outputDir/bwameth/reference_genome/bwameth/genome.fa.bwameth.c2t").exists()
            // FIXME assert snapshot(workflow).match()
        }
    }

    test("Single End with index") {
        when {
            params {
                aligner = "bwameth"
                // Generated by previous test
                bwa_meth_index = ".nf-test/indexes/bwameth/"
                methyl_kit = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
        }
    }

    test("Single End RRBS") {
        when {
            params {
                aligner = "bwameth"
                save_reference = true
                skip_trimming = true
                rrbs = true
                save_reference = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
        }
    }

    test("Single End RRBS with index") {
        when {
            params {
                aligner = "bwameth"
                skip_trimming = true
                rrbs = true
                // Generated by previous test
                bwa_meth_index = ".nf-test/indexes/bwameth/"
                methyl_kit = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.trace.tasks().size()).match()
            // FIXME assert snapshot(workflow).match()
        }
    }

}
