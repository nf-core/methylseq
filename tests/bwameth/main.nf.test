import com.askimed.nf.test.util.FileUtil;

nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "Bwameth"

    test("Bwameth Single End") {
        when {
            params {
                aligner = "bwameth"
                save_reference = true
                outdir = "$outputDir"
            }
        }

        then {
            // Clean up anything from previous runs
            FileUtil.deleteDirectory(new File(".nf-test/indexes/"));
            new File(".nf-test/indexes/").mkdirs()
            // Copy the ref genome to a stable location for next tests
            FileUtil.copyDirectory(
                new File("$outputDir/bwameth/reference_genome/bwameth/").getAbsolutePath(),
                new File(".nf-test/indexes/bwameth/").getAbsolutePath()
            )

            assertAll(
                { assert workflow.success },
                { assert snapshot(path("$outputDir/bwameth/alignments/samtools_stats/Ecoli_10K_methylated.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub1.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub2.flagstat"),
                            path("$outputDir/methyldackel/Ecoli_10K_methylated.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub1.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub2.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/qualimap/Ecoli_10K_methylated/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub1/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub2/genome_results.txt"),
                            path("$outputDir/pipeline_info/software_versions.yml")).match("single_end") }
            )
        }
    }

    test("Bwameth Single End With Index") {
        when {
            params {
                aligner = "bwameth"
                // Generated by previous test
                bwa_meth_index = ".nf-test/indexes/bwameth/"
                methyl_kit = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
        }
    }

    test("Bwameth Single End RRBS") {
        when {
            params {
                aligner = "bwameth"
                save_reference = true
                skip_trimming = true
                rrbs = true
                save_reference = true
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(path("$outputDir/bwameth/alignments/samtools_stats/Ecoli_10K_methylated.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub1.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub2.flagstat"),
                            path("$outputDir/methyldackel/Ecoli_10K_methylated.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub1.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub2.sorted_CpG.bedGraph"),
                            path("$outputDir/qualimap/Ecoli_10K_methylated/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub1/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub2/genome_results.txt"),
                            path("$outputDir/pipeline_info/software_versions.yml")).match("single_end_rrbs") }
            )
        }
    }

    test("Bwameth Single End RRBS With Index") {
        when {
            params {
                aligner = "bwameth"
                skip_trimming = true
                rrbs = true
                // Generated by previous test
                bwa_meth_index = ".nf-test/indexes/bwameth/"
                methyl_kit = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.success
        }
    }

}
